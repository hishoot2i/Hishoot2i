plugins {
    //
    id 'androidx.navigation.safeargs.kotlin' apply false
    id 'com.android.application' apply false
    id 'dagger.hilt.android.plugin' apply false
    id 'org.jetbrains.kotlin.jvm' apply false

    id 'com.autonomousapps.dependency-analysis'
    id 'com.diffplug.spotless'
    id 'com.github.ben-manes.versions'
}

allprojects {
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails drd ->
            def group = drd.requested.group
            def name = drd.requested.name
            if (group ==~ /androidx\.activity/) {
                drd.useVersion androidxLibs.versions.activity.get()
            }
            if (group ==~ /androidx\.arch\.core/) {
                drd.useVersion androidxLibs.versions.archCore.get()
            }
            if (group ==~ /androidx\.collection/) {
                drd.useVersion androidxLibs.versions.collection.get()
            }
            if (group ==~ /androidx\.lifecycle/) {
                drd.useVersion androidxLibs.versions.lifeCycle.get()
            }
            if (group ==~ /androidx\.transition/) {
                drd.useVersion androidxLibs.versions.transition.get()
            }
            if (group ==~ /com\.squareup\.okhttp3/) {
                drd.useVersion libs.versions.okHttp.get()
            }
            if (group ==~ /org\.jetbrains\.kotlin/) {
                drd.useVersion libs.versions.kotlin.get()
            }
            if (group ==~ /org\.jetbrains\.kotlinx/ && name ==~ /kotlinx-coroutines.*/) {
                drd.useVersion libs.versions.coroutines.get()
            }
        }
    }
    apply from: rootDir.path + '/buildsystem/spotless.gradle'
}

dependencyAnalysis {
    issues {
        all {
            onAny {
                severity 'fail'
            }
        }
    }
}

tasks.named('dependencyUpdates').configure {
    def isStable = { String version -> version ==~ /^[0-9,.v-]+(-r)?$/ }
    rejectVersionIf { !isStable(it.candidate.version) && isStable(it.currentVersion) }
    checkForGradleUpdate = false //
}

subprojects {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = '1.8'
            allWarningsAsErrors = true
            verbose = true
            useIR = true
            freeCompilerArgs = ["-Xopt-in=kotlin.RequiresOptIn"]
        }
    }
}
